<?php	include_once $rel.'services/get.php';	include_once $rel.'services/post.php';	include_once $rel.'globals/env.php';	include_once $rel.'private_datas/filtre_fonc.php';	include_once $rel.'utils/secureVars.php';	include_once $rel.'utils/json.php';	function filtre(&$usr, $client = null){	$env = setEnv();		// vérifie que la clé est valide. Permet de définir sur quel service l'appel est effectué.	$usr['noService'] = isset($usr['key']) ? isKeyValid($usr['key']) : null;	if($usr['noService'] != null){				// crée un log de l'appel effectué sur l'api		$usr['logid'] = 0;		if($env['logAPIreq'] == true){			postApiLogs($usr, safe_string($_SERVER['HTTP_USER_AGENT']), safe_string($_SERVER['REQUEST_URI']), $logid);			$usr['logid'] = $logid;		}				// vérifie que le nombre de requêtes autorisé n'est pas dépassé		keyReqLeft($usr, 'user');		if($usr['reqLeft'] < 0){			$usr['reqLeft'] = 0;			if($client == 'client'){return 402;}			else{				echo createErrorJson($usr, 402);				exit;			}		}				if(isCorrectDbVersion($usr) == false){			if($client == 'client'){return 405;}			else{				echo createErrorJson($usr, 405);				exit;			}		}	}	else{		if($client == 'client'){return 401;}		else{			echo createErrorJson($usr, 401);			exit;		}	}		return null;}function filtreAdmin(&$usr){	$env = setEnv();		// vérifie que la clé est valide. Permet de définir sur quel service l'appel est effectué.	$usr['noService'] = isset($usr['adminkey']) ? isAdminKeyValid($usr['adminkey']) : null;	if($usr['noService'] != null){		$usr['key'] = $usr['adminkey'];				// crée un log de l'appel effectué sur l'api		$usr['logid'] = 0;		if($env['logAPIreq'] == true){			postApiLogs($usr, safe_string($_SERVER['HTTP_USER_AGENT']), safe_string($_SERVER['REQUEST_URI']), $logid);			$usr['logid'] = $logid;		}				// vérifie que le nombre de requêtes autorisé n'est pas dépassé		keyReqLeft($usr, 'admin');		if($usr['reqLeft'] < 0){			$usr['reqLeft'] = 0;			echo createErrorJson($usr, 402);			exit;		}	}	else{		echo createErrorJson($usr, 401);		exit;	}}function keyReqLeft(&$usr, $type){	$env = setEnv();		$usr['reqLeft'] = 0;	$usr['nextReset'] = 0;		$result = getKeyCptCount($usr);		if($result == null){		postCreateKeyCptCount($usr, $type);		$usr['reqLeft'] = $env['allowedReqPerTime'] - 1;		$usr['nextReset'] = $env['reqResetTime'];	}	else{		$usr['nextReset'] = $result['reset_time'] - (getTimestamp() - $result['last_reset']);				if($usr['nextReset'] < 0){			postResetKeyCpt($usr);			$usr['reqLeft'] = $result['max_cpt'] - 1;			$usr['nextReset'] = $result['reset_time'];		}		else{			if($result['cpt'] <= $result['max_cpt']){				postIncKeyCpt($usr);			}			$usr['reqLeft'] = $result['max_cpt'] - $result['cpt'];		}	}}?>